# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  syntax-check:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Ruff Lint
      run: |
        ruff check --output-format=github

  tests:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    permissions:
      checks: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: PyTest
      run: |
        pytest --cov=app src --junitxml=junit/test-results.xml
    - name: Publish Test Results for ${{ matrix.python-version }}
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: junit/test-results.xml
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/test-results.xml

  security-scan:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Bandit
      run: |
        bandit src/app.py

  release:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.get_version.outputs.new_release }}
    needs: [tests, syntax-check, security-scan]
    permissions:
      contents: write # to be able to publish a new release
      packages: write # to be able to publish package
      pull-requests: write # to create pull requests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # important for semantic-release to analyze commits
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install semantic-release dependencies
        run: npm install semantic-release @semantic-release/changelog @semantic-release/git --save-dev
      - name: Get Semantic Version
        id: get_version
        run: |
          VERSION=$(npx semantic-release --dry-run --no-ci | grep "The next release version is" | awk '{print $5}')
          echo "$VERSION"
          echo "::set-output name=new_release::$VERSION"
      - name: Debug Semantic Release Output
        run: npx semantic-release --dry-run --no-ci
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build-and-push:
    runs-on: ubuntu-latest

    needs: [release]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repositoy
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          REPOSITORY_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          VERSION="${{ needs.release.outputs.release_version }}"
          IMAGE_TAG="ghcr.io/${REPOSITORY_LOWERCASE}/demo-flask-app:${VERSION}"

          docker build -t "${IMAGE_TAG}" -f Dockerfile .
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV # Export for the next step

      - name: Push Docker Image
        run: |
          echo "Pushing image: $IMAGE_TAG"
          docker push "${{ env.IMAGE_TAG }}"
          docker push "ghcr.io/${{ github.repository_owner }}/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')/demo-flask-app:latest" # Still push latest